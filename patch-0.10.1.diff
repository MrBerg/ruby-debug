Index: test/data/breakpoints.right
===================================================================
--- test/data/breakpoints.right	(revision 830)
+++ test/data/breakpoints.right	(working copy)
@@ -16,7 +16,7 @@
 # break 10
 Breakpoint 2 file ./gcd.rb, line 10
 # break 11
-*** Line 11 is not a stopping point in file "gcd.rb".
+Breakpoint 3 file ./gcd.rb, line 11
 # continue
 Breakpoint 1 at gcd.rb:6
 gcd.rb:6
@@ -25,13 +25,14 @@
 --> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:6
     #1 at line gcd.rb:18
 # break Object.gcd
-Breakpoint 3 at Object::gcd
+Breakpoint 4 at Object::gcd
 # info break
 Num Enb What
   1 y   at gcd.rb:6
 	breakpoint already hit 1 time
   2 y   at gcd.rb:10
-  3 y   at Object:gcd
+  3 y   at gcd.rb:11
+  4 y   at Object:gcd
 # continue
 Breakpoint 2 at gcd.rb:10
 gcd.rb:10
@@ -42,7 +43,7 @@
 # info program
 Program stopped. It stopped at a breakpoint.
 # c 10
-Breakpoint 3 at Object:gcd
+Breakpoint 4 at Object:gcd
 gcd.rb:4
 def gcd(a, b)
 # info break
@@ -51,7 +52,8 @@
 	breakpoint already hit 1 time
   2 y   at gcd.rb:10
 	breakpoint already hit 1 time
-  3 y   at Object:gcd
+  3 y   at gcd.rb:11
+  4 y   at Object:gcd
 	breakpoint already hit 1 time
 # break foo
 *** Invalid breakpoint location: foo.
@@ -61,7 +63,8 @@
 	breakpoint already hit 1 time
   2 y   at gcd.rb:10
 	breakpoint already hit 1 time
-  3 y   at Object:gcd
+  3 y   at gcd.rb:11
+  4 y   at Object:gcd
 	breakpoint already hit 1 time
 # disable  1
 # info break
@@ -70,7 +73,8 @@
 	breakpoint already hit 1 time
   2 y   at gcd.rb:10
 	breakpoint already hit 1 time
-  3 y   at Object:gcd
+  3 y   at gcd.rb:11
+  4 y   at Object:gcd
 	breakpoint already hit 1 time
 # delete 1
 # # We should see breakpoint 2 but not 1
@@ -78,7 +82,8 @@
 Num Enb What
   2 y   at gcd.rb:10
 	breakpoint already hit 1 time
-  3 y   at Object:gcd
+  3 y   at gcd.rb:11
+  4 y   at Object:gcd
 	breakpoint already hit 1 time
 # # We should still be able to access 2
 # disable 2
@@ -87,7 +92,7 @@
 # disable
 *** "disable" must be followed "display", "breakpoints" or breakpoint numbers.
 # # We should be able to delete 2
-# delete 2 3
+# delete 2 3 4
 # info break
 No breakpoints.
 # # Should get a message about having no breakpoints.
Index: test/data/output.right
===================================================================
--- test/data/output.right	(revision 830)
+++ test/data/output.right	(working copy)
@@ -31,9 +31,13 @@
 two
 stopped
 stack
---> #0 debug_program at line tdebug.rb:53
+--> #0 Object.debug_program(options#OpenStruct) at line tdebug.rb:53
 
 variables
+bt = nil
+d0 = "./output.rb"
+options = #<OpenStruct annotate=false, emacs=false, frame_bind=false, no-quit...
+output = "Syntax OK\n"
 self = main
 
 source tdebug.rb:53
Index: test/data/stepping.cmd
===================================================================
--- test/data/stepping.cmd	(revision 830)
+++ test/data/stepping.cmd	(working copy)
@@ -7,13 +7,13 @@
 where
 step a
 set forcestep on
-step- ; step-
+step-
 set forcestep off
 where
-n 2
+n
 step+
 where
-step 3
+step 2
 step+
 where
 next+	
Index: test/data/test-init.right
===================================================================
--- test/data/test-init.right	(revision 830)
+++ test/data/test-init.right	(working copy)
@@ -1,5 +1,7 @@
 gcd-dbg.rb:18
 if a > b
-(rdb:1) "./gcd-dbg.rb"
-(rdb:1) Argument list to give program being debugged when it is started is "5".
-(rdb:1) 
\ No newline at end of file
+(rdb:1) p Debugger::PROG_SCRIPT
+"./gcd-dbg.rb"
+(rdb:1) show args
+Argument list to give program being debugged when it is started is "5".
+(rdb:1) quit unconditionally
Index: test/data/stepping.right
===================================================================
--- test/data/stepping.right	(revision 830)
+++ test/data/stepping.right	(working copy)
@@ -16,7 +16,7 @@
 Step argument 'a' needs to be a number.
 # set forcestep on
 force-stepping is on.
-# step- ; step-
+# step-
 gcd.rb:6
 if a > b
 # set forcestep off
@@ -24,7 +24,7 @@
 # where
 --> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:6
     #1 at line gcd.rb:18
-# n 2
+# n
 gcd.rb:10
 return nil if a <= 0
 # step+
@@ -33,7 +33,7 @@
 # where
 --> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:12
     #1 at line gcd.rb:18
-# step 3
+# step 2
 gcd.rb:6
 if a > b
 # step+
@@ -41,7 +41,7 @@
 return nil if a <= 0
 # where
 --> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:10
-    #1 Object.-(a#Fixnum, b#Fixnum) at line gcd.rb:15
+    #1 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:15
     #2 at line gcd.rb:18
 # next+	
 gcd.rb:12
Index: test/data/break_bad.right
===================================================================
--- test/data/break_bad.right	(revision 830)
+++ test/data/break_bad.right	(working copy)
@@ -18,10 +18,10 @@
 # # Line one isn't a valid stopping point.
 # # It is a comment.
 # break gcd.rb:1
-*** Line 1 is not a stopping point in file "gcd.rb".
+Breakpoint 1 file gcd.rb, line 1
 # # This line is okay
 # break gcd.rb:4
-Breakpoint 1 file gcd.rb, line 4
+Breakpoint 2 file gcd.rb, line 4
 # # No class Foo.
 # break Foo.bar
 *** Unknown class Foo.
Index: test/data/breakpoints.cmd
===================================================================
--- test/data/breakpoints.cmd	(revision 830)
+++ test/data/breakpoints.cmd	(working copy)
@@ -30,7 +30,7 @@
 disable bar
 disable
 # We should be able to delete 2
-delete 2 3
+delete 2 3 4
 info break
 # Should get a message about having no breakpoints.
 disable 1
Index: test/data/annotate.right
===================================================================
--- test/data/annotate.right	(revision 830)
+++ test/data/annotate.right	(working copy)
@@ -83,7 +83,7 @@
 display
 
 stack
---> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:6
+--> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:10
     #1 at line gcd.rb:18
 
 variables
@@ -91,8 +91,8 @@
 b = 5
 self = main
 
-source gcd.rb:6
-if a > b
+source gcd.rb:10
+return nil if a <= 0
 # # Test error annotations
 # up 10
 error-begin
@@ -101,7 +101,7 @@
 display
 
 stack
---> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:6
+--> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:10
     #1 at line gcd.rb:18
 
 variables
@@ -116,7 +116,7 @@
 display
 
 stack
---> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:6
+--> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:10
     #1 at line gcd.rb:18
 
 variables
Index: test/data/info.right
===================================================================
--- test/data/info.right	(revision 830)
+++ test/data/info.right	(working copy)
@@ -61,5 +61,5 @@
 # info file ./gcd.rb break
 File ./gcd.rb
 	breakpoint line numbers:
-4  6  6  7  10  10  12  12  13  15  18
+1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18
 # quit
Index: test/config.private.yaml
===================================================================
--- test/config.private.yaml	(revision 0)
+++ test/config.private.yaml	(revision 0)
@@ -0,0 +1,5 @@
+# either should be on the $PATH or use full path
+ruby: jruby
+
+# possibility to specify interpreter parameters
+ruby_params: -J-Djruby.reflection=true -J-Djruby.compile.mode=OFF
Index: test/helper.rb
===================================================================
--- test/helper.rb	(revision 830)
+++ test/helper.rb	(working copy)
@@ -1,6 +1,7 @@
 # Some common routines used in testing.
 
 require 'fileutils'
+require 'yaml'
 # require 'diff/lcs'
 # require 'diff/lcs/hunk'
 
@@ -21,12 +22,13 @@
     end
     
     ENV['RDEBUG'] = debug_pgm
+
     if old_code
       cmd = "/bin/sh #{File.join('..', 'runner.sh')} #{args} >#{outfile}"
     else
-      cmd = "../rdbg.rb #{args} >#{outfile}"
+      cmd = "#{"#{load_ruby} #{load_params} "}../rdbg.rb #{args} > #{outfile}"
     end
-    # puts cmd
+    # puts "'#{cmd}'"
     output = `#{cmd}`
     
     got_lines     = File.read(outfile).split(/\n/)
@@ -112,6 +114,26 @@
   #   # Handle the last remaining hunk 
   #   output << oldhunk.diff(format) << '\n'
   # end
+  
+  # Loads key from the _config_._yaml_ file.
+  def config_load(key, may_be_nil=false, default_value='')
+    conf = File.join('config.private.yaml') # try private first
+    conf = File.join('config.yaml') unless File.exists?(conf)
+    value = YAML.load_file(conf)[key]
+    assert_not_nil(value, "#{key} is set in config.yaml") unless may_be_nil
+    value || default_value
+  end
+  module_function :config_load
 
+  def load_ruby
+    config_load('ruby', true)
+  end
+  module_function :load_ruby
+
+  def load_params
+    config_load('ruby_params', true)
+  end
+  module_function :load_params
+  
 end
 
Index: test/test-init.rb
===================================================================
--- test/test-init.rb	(revision 830)
+++ test/test-init.rb	(working copy)
@@ -1,6 +1,7 @@
 #!/usr/bin/env ruby
 require 'test/unit'
 require 'rbconfig'
+require File.join(File.dirname(__FILE__), 'helper.rb')
 
 # begin require 'rubygems' rescue LoadError end
 # require 'ruby-debug'; Debugger.start
@@ -16,7 +17,8 @@
       old_columns = ENV['COLUMNS']
       ENV['EMACS'] = nil
       ENV['COLUMNS'] = '120'
-      IO.popen("./gcd-dbg.rb 5 >#{debugger_output}", 'w') do |pipe|
+      ruby = "#{TestHelper.load_ruby} #{TestHelper.load_params}"
+      IO.popen("#{ruby} ./gcd-dbg.rb 5 >#{debugger_output}", 'w') do |pipe|
         pipe.puts 'p Debugger::PROG_SCRIPT'
         pipe.puts 'show args'
         pipe.puts 'quit unconditionally'
